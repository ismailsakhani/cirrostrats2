Practice readibility and simplicity. Include description and documentation for others to read and make changes to it

**IS:   
        DONE! make search bar static and minimal 
        DONE! Investigte this `WARNINGS` from terminal when running `runserver` :
            ?: (staticfiles.W004) The directory 'C:\Users\ujasv\OneDrive\Desktop\codes\Weather_work\dj\static' in the STATICFILES_DIRS setting does not exist.
        NOT DONE! When searching random stuff the `try example` sectino is stuck to the left. Align it to center like home.html 
            -- it should show the `try example` section as shown in home.html.
            
        DONE! Make seperate css for templates/dj_app/base.html its not a good practive to have styling within html. 
        DONE! weather table extends to the edge lines on the sides. restrict them tightly for readability.
        
            **** I dont think this is possible just with html and CSS, best we can do it responsive site, it will look like desktop site in laptop, tablets and iPad and it will look like mobile app in phone ****
            mobile site layout should be presented when requested a mobile site. - still figurin this out 


**UV:   
        DONE! fix and cleanup description in examples on homepage.
        DONE! TAF can be out of index. remove TAF if unavailable. Redirect to no found page if no weather found.
                for example `w kcdw` returns error since index is out range probably because TAF is not available for it.
        Done! Major time issue fixes for pulling lengthy web scrape . 
        DONE! Fix date and time on `i` switch output
        Done! Fix exponentially destructive while loop in the Gate_Scrape_Thread within root_gate_checker.py
        DONE! Add all past queries in the web itself in a menu section so it is easily accessible.
        DONE! seperate TAF by "   " and replace it with new line to make it viewable.
        
        DONE! move reliable structured data operation into the scraper rather than dealing with in Gate_checker()
    	Done! Treat unreliable flights at source before it is dumped as master.pkl to keep master pikle clean.
                Account for reliable and unreliable outlaws at source rather than scheduled flights
        DONE! Move all template looking functions to root_class. 
            exec(), reliable flight_num, 
                
        Scrape `scheduled` times less frequently as it is mostly static.
        Only scrape `actual` times more frequently and from different web source to decrease intensive pull.
        
        add activator() scrape to include data from few hours later since its currently only showing 6am, 12pm and 6pm.
        
        fix freeze bug on the EC2. After running lengthy scrape for a few days cmd seems to get stuck.
            Discard while loop instead use:use a task scheduling library like Celery with a task queue such as RabbitMQ or Redis to handle the scheduled tasks asynchronously.
            Utilize webhooks or event-driven architectures: Instead of pulling data in a loop, you can set up webhooks or use event-driven architectures to receive notifications or updates from the sources you want to scrape. This way, you can fetch data only when it becomes available or when an event is triggere.

        flight deet packet:
            Include STD and ETA in zulu in the flight deet.
            Addfunctionality to find any flight. Also add current Zulu time
            Examine metar and TAF for parsing and color coding IFR and LIFR ceilings, Visibility, freezing conditions and runway condition codes.
            Highlight weather minimums in red for alternate requirements;(1-2-3 rule per ETA)
                1/2SM as pink and 1/4SM as black
            Highlight Icing conditions in blue; LIFR in pink 
            include gate in this packet of information
            include IFR routing through flight aware if able
            associate flight numbers in gates table to their dedicated information for departure, destination and weather

        make use of http://xml.flightview.com/xmlbdom/ for pulling flight data instead of requests and bs4 libraries
        
        Use models and sql for database management.

        Add source information 


Note consistent irregularity in the outlaws - check for patterns.
    fix outlaws such that those patterns are overwritten and only unique patterns get updated in it. 

Use Flightaware API to extract clearance and route.

When User first accesses the web the date and time of the latest master should be displayed 

Add menu section:
    List all gates, 
    Analyses, statistics and misery map using delay graph.
        e.g: Kudos to gate C101 for most ontime departures. 
            Worst gate for delays(show sorted values)   

need to be able to receive alerts if the weather deteriorates:
    Account for any ground stop or delays there might be at any particular airport in the National Airspace System

add delay information and color code it

setup latest changes page. Include updates with dates and description. 
Fix Gate_Scrape Scrape uppercase. It is unusual.

Deploy the ability to chat. Store all queries with time stamp for later analyses.
    Compare and assess similar frequent queries, account for typo. 
    Take query and if return cannot be formulated let the client know:
        "Unable to process your search at this time.
        It has been added to our resolutions list for further attention with absolute dedication."
        **option** Add Feedback to go with it

add ability to see raw metar or simplified one with only pertinant information.

Big bug when extracting info from other sources. the data can be messy and unreiable. Create redundency

airport name, gate and flight # can be partial/absolute.
    Essentially a functionality to predict in dropdown in search similar to google - indexing.
    search should initiate right away for flight num, airport or gate

Add these query words and functionality to chat :
weather_range = ['met ', ' met', ' met ', 'met', 'taf ', ' taf', ' taf ', 'taf', 'weather', 'metar', 'metar ']

"{gate} for {partial/complete airport ID/name}" = "{gate} {airport}"
"{gate} for {partial/complete airport name}" = "{gate} {airport}"   
"weather for {partial/complete airport} = "{metar} {airport}"
"{flight number} weather" = "{metar} {departure airport} {destination airport}"
"{flight number} destination" = return destination or destination
"{flight number} not, notam, notams" = return notams for departure and destination. include ability to return just pertinant information.